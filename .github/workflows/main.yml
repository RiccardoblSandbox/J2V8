name: Build J2V8
on: [push]

jobs:
  buildV8:
    strategy:
      fail-fast: true
      matrix:
        target: [win32-x64,linux-x64] 
        include:
          - target: win32-x64
            target_os: windows
            target_arch: x64 
            config: windows-x64 
          - target: linux-x64
            target_os: linux
            target_arch: x64 
            config: linux-x64 


    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Build v8
        env:
          USE_VERSION: 7.4.288 
        run: |
          mkdir -p v8build
          cd v8build
          
          git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools
          export PATH=$GITHUB_WORKSPACE/v8build/depot_tools:"$PATH" 

          fetch v8
          
          cd v8
          git checkout ${USE_VERSION}
          cd ..
          
          echo "target_os= ['${{ matrix.target_os }}']">>.gclient
          gclient sync
          
          cd v8
          ./build/install-build-deps.sh
          ./tools/dev/v8gen.py ${{ matrix.target_arch }}.release -vv
            
                    
          rm out.gn/${{ matrix.target_arch }}.release/args.gn          
          cp -v $GITHUB_WORKSPACE/v8/${{ matrix.config }}/args.gn out.gn/${{ matrix.target_arch }}.release/args.gn
          
          cat out.gn/${{ matrix.target_arch }}.release/args.gn
          ninja -C out.gn/${{ matrix.target_arch }}.release 
          
          
          du out.gn/${{ matrix.target_arch }}.release
                
          rm -Rf $GITHUB_WORKSPACE/dist/ || true
          mkdir -p $GITHUB_WORKSPACE/dist/
          
          cp out.gn/${{ matrix.target_arch }}.release/obj/libv8_monolith.* $GITHUB_WORKSPACE/dist/
          cp -R include $GITHUB_WORKSPACE/dist/
          
          cd ..
          
          cd ..

  generate_j2v8_archives:
    strategy:
      fail-fast: true
      matrix:
        target: [win32,linux] 
        include:
          - target: win32
            os: windows-latest
          - target: linux
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.target }}

    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        depth: 1
      
    - name: Set up Python 2.7
      uses: actions/setup-python@v2
      with:
        python-version: 2.7
        
    - name: Setup MSBuild
      if: matrix.target == 'win32'
      uses: microsoft/setup-msbuild@v1.0.1
        
    - name: Build for ${{ matrix.target }}
      if: matrix.target == 'wien32'
      run: |
        .\j2v8-cli.cmd
        python build.py -t win32 -a x64 j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java j2v8test
        
