name: Build J2V8
on: [push]
env:
  V8VERSION: 7.4.288
  CACHE_ID: 1
  DEBUG_TMATE: "1"
  
jobs:
  buildV8:
    name: Build V8 on ${{ matrix.target }}
    strategy:
      fail-fast: true
      matrix:
        include:          
          - target: windows-x64
            target_os: win32
            target_arch: x64 
            os: windows-latest  

          - target: linux-x64
            target_os: linux
            target_arch: x64 
            os: ubuntu-latest  

          - target: android-arm
            target_os: android
            target_arch: arm
            os: ubuntu-latest  

          - target: android-arm64
            target_os: android
            target_arch: arm64
            os: ubuntu-latest  

          - target: android-ia32
            target_os: android
            target_arch: ia32
            os: ubuntu-latest  

          - target: android-x64
            target_os: android
            target_arch: x64       
            os: ubuntu-latest  


    runs-on: ${{ matrix.os }}
    steps:
      
      - name: Setup cache
        uses: actions/cache@v2.1.0
        with:
          path: v8.out/
          key: ${{ matrix.target }}-${{ env.V8VERSION }}-${{ env.CACHE_ID }}
          
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      
      - name: Build v8 ${{ env.V8VERSION }}
        shell: bash
        env:
          USE_VERSION: 7.4.288 
        run: |
      
          if [ ! -f "$GITHUB_WORKSPACE/dist/built" ] || [[ $GITHUB_REF == refs\/tags* ]]; # Always build fresh on tags.
          then
            echo "Cache not found or invalid. Build"
          else
            echo "Cache found. Skip"
            exit 0
          fi
          
                
          mkdir -p v8build
          cd v8build
          
          echo "Clone tools"
          git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools
          echo "Cloned!"
          
          echo "Export path"
          export PATH="$GITHUB_WORKSPACE/v8build/depot_tools:$PATH" 
          
          echo "Fetch v8"          
          fetch v8
          cd v8
          git checkout ${V8VERSION}
          cd ..
          
          echo "Set platform"          
          tos="${{ matrix.target_os }}"
          if [ "$tos" == "win32" ];then tos="win"; fi
          
          echo "target_os= ['$tos']">>.gclient
          gclient sync
          
          cd v8
          ls ./build/ -l
          
          echo "Install dependencies"
          ./build/install-build-deps.sh
         
          echo "Prepare build"
          gn gen out --args="`cat $GITHUB_WORKSPACE/v8/${{ matrix.target }}/args.gn`"
                  
          echo "Build"
          ninja -C out/          
                         
          echo "Prepare dist"
          distPath="$GITHUB_WORKSPACE/v8.out/"
          libsPath="$distPath/${{ matrix.target_os }}.${{ matrix.target_arch }}"
          
          rm -Rf "$distPath" || true
          mkdir -p "$distPath"
          mkdir -p "$libsPath"
          
          cp -v out/obj/libv8_monolith.* "$libsPath"
          cp -Rv include  "$distPath"
          echo 1 > "$distPath"
          
          cd ../..
          
          echo "Done"
                    

      - name: Setup DEBUG tmate session
        if: ${{ failure() }} && env.DEBUG_TMATE!=""
        uses: mxschmitt/action-tmate@v2
        
  buildJ2v8:
    strategy:
      fail-fast: true
      matrix:
        include: 
          - target: windows-x64
            target_os: win32
            target_arch: x64 
            os: windows-latest 

          - target: linux-x64
            target_os: linux
            target_arch: x64
            os: ubuntu-latest  

          - target: android-arm
            target_os: android
            target_arch: arm
            os: ubuntu-latest 

          - target: android-arm64
            target_os: android
            target_arch: arm64
            os: ubuntu-latest  

          - target: android-ia32
            target_os: android
            target_arch: ia32
            os: ubuntu-latest  

          - target: android-x64
            target_os: android
            target_arch: x64
            os: ubuntu-latest  

    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.target }}
    needs: [buildV8]
  

    steps:
    
    - name: Checkout
      uses: actions/checkout@v1
      with:
        depth: 1
      
    - name: Set up Python 2.7
      uses: actions/setup-python@v2
      with:
        python-version: 2.7
   
    - name: Fetch v8 library
      uses: actions/cache@v2.1.0
      with:
        path: v8.out/
        key: ${{ matrix.target }}-${{ env.V8VERSION }}-${{ env.CACHE_ID }}       
          
    - name: Setup MSBuild
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.0.1
        
    - name: Build for ${{ matrix.target }}
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        .\j2v8-cli.cmd
        python build.py -t  ${{ matrix.target_os }} -a  ${{ matrix.target_arch }} j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java j2v8test
        
    - name: Build for ${{ matrix.target }}
      if: matrix.os != 'windows-latest'
      run: |
        source ./j2v8-cli.sh
        a1=""; if [ "${{ matrix.target_os }}" == "android" ]; then a1="$a1 --keep-native-libs"; fi
        python build.py -t ${{ matrix.target_os }} -a  ${{ matrix.target_arch }} $a1 --docker j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java j2v8test
        
